"""
Polimorfismo √© o princ√≠pio que permite que
classes deridavas de uma mesma superclasse
tenham m√©todos iguais (com mesma assinatura)
mas comportamentos diferentes.

Assinatura do m√©todo = Mesmo nome e quantidade
de par√¢metros (retorno n√£o faz parte da assinatura)
Opini√£o + princ√≠pios que contam:
Assinatura do m√©todo: nome, par√¢metros e retorno iguais

Princ√≠pio da substitui√ß√£o de liskov
Objetos de uma superclasse devem ser substitu√≠veis
por objetos de uma subclasse sem quebrar a aplica√ß√£o.

Sobrecarga de m√©todos (overload)  üêç = ‚ùå
Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
"""

from abc import ABC, abstractmethod


class Notification(ABC):
    def __init__(self, msg):
        self._msg = msg

    @abstractmethod
    def enviar(self):
        ...


class EmailNotification(Notification):
    def enviar(self) -> bool:
        print(f"E-mail: enviando - {self._msg}")
        return True


class SMSNotification(Notification):
    def enviar(self) -> bool:
        print(f"SMS: enviando - {self._msg}")
        return False


def notify(notification: Notification):
    sent = notification.enviar()

    if sent:
        print("Notifica√ß√£o enviada.")
    else:
        print("Notifica√ß√£o n√£o enviada.")


email = notify(EmailNotification("Teste Email"))
sms = notify(SMSNotification("Teste SMS"))
